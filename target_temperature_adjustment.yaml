blueprint:
  name: Carrier Infinity target temperature adjustment depending on secondary temperature sensor
  description: >
    Sets target temperature depending on secondary temperature sensor. Group multiple temperature sensors in a helper group and set
    device_class to temerature. Climate device must be set in auto or heat/cool mode.
  domain: automation
  input:
    temperature_sensors:
      name: Group temperature sensor
      description: The group of temperature sensors used as the source.
      selector:
        entity:
          domain: sensor
          device_class: temperature
    thermostat:
      name: Thermostat
      description: The thermostat to set target temperature
      selector:
        entity:
          domain: climate
    thermostat_mode:
      name: Thermostat Mode
      description: Target thermostat current operating mode
      selector:
        entity:
          domain: climate
    target_high_temperature:
      name: Target high temperature
      description: Target high temperature of the thermostat
      selector:
        number:
          min: 0
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
      default: 73
    target_low_temperature:
      name: Target low temperature
      description: Target low temperature of the thermostat
      selector:
        number:
          min: 0
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
      default: 70
          
variables:
  thermostat: !input thermostat
  temperature_sensors: !input temperature_sensors
  target_low_temperature: !input target_low_temperature
  target_high_temperature: !input target_high_temperature
  thermostat_mode: "{{ states(thermostat) }}"
  actual_temperature: "{{ states(temperature_sensor) | float }}"
  current_temperature: !input
  
trigger:
- platform: state
  entity_id: !input thermostat
  attribute: "{{ current_temperature_attribute }}"
- platform: state
  entity_id: !input temperature_sensor
  
condition: "{{ calculated_adjustment != 0 }}"

action:
- service: system_log.write
  data:
    message: >
      {{ thermostat }} is currently in mode {{ thermostat_mode }} and has temp difference of {{ calculated_adjustment }}. Setting target temperature to {{ calculated_target_temperature }}
    level: info
    logger: blueprints.nevesenin.target_temperature_adjustment
- service: system_log.write
  data:
    message: >
      thermostat: {{ thermostat }},
      temperature_sensors: {{ temperature_sensor }},
      thermostat_mode: {{ thermostat_mode }},
      target_cool_temperature: {{ target_cool_temperature }},
      target_heat_temperature: {{ target_heat_temperature }},
      actual_temperature: {{ actual_temperature }},
      calculated_adjustment: {{ calculated_adjustment }},
      calculated_target_temperature: {{ calculated_target_temperature }}
    level: debug
    logger: blueprints.nevesenin.target_temperature_adjustment
- choose:
      - conditions:
          - condition: state
            entity_id: {{thermostat}}
            attribute: hvac_action
            state: cooling
        sequence:
          - condition: state
            entity_id: input_boolean.hvac_cool_on
            state: "on"
          - condition: state
            entity_id: input_boolean.hvac_heat_on
            state: "off"
      - conditions:
          - condition: state
            entity_id: climate.home_zone_1
            attribute: hvac_action
            state: heating
        sequence:
          - condition: state
            entity_id: input_boolean.hvac_heat_on
            state: "on"
          - condition: state
            entity_id: input_boolean.hvac_cool_on
            state: "off"
      
- service: climate.set_temperature
  data:
    temperature: "{{ calculated_target_temperature }}"
    entity_id: "{{ thermostat }}"
mode: single
