blueprint:
  name: Update temperature of the thermostat
  domain: automation
  input:
    climate_target:
      name: Thermostat
      description: Thermostat to be updated
      selector:
        entity:
          domain: climate
    t_current_target:
      name: T_curr
      description: Current temperature from sensor group
      selector:
        entity:
          domain: sensor
          device_class: temperature
    target_high_temperature:
      name: Target high temperature
      description: Target high temperature of the thermostat
      selector:
        number:
          min: 0
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
      default: 73
    target_low_temperature:
      name: Target low temperature
      description: Target low temperature of the thermostat
      selector:
        number:
          min: 0
          max: 100
          step: 0.5
          unit_of_measurement: "°F"
      default: 70
mode: queued

variables:
  climate_target: !input climate_target
  t_current_target: !input t_current_target
  target_low_temperature: !input target_low_temperature
  target_high_temperature: !input target_high_temperature
  t_thermostat: "{{float(state_attr(climate_target,'current_temperature') , 0)}}"
  t_current: "{{float(states[t_current_target].state, 0) }}"

trigger:
  - platform: state
    entity_id: !input climate_target
    id: climate
  - platform: state
    entity_id: !input t_current_target
    id: temperature

action:
  - choose:
    - conditions:
      - condition: template
        value_template: '{{ (t_current != t_thermostat) and (t_current  != 0) and (t_thermostat != 0) }}'
      sequence:
      - service: climate.set_temperature
        data:
          target_temp_high: {{ target_high_temperature }}
          target_temp_low: {{ target_low_temperature }}
          entity_id: !input climate_target
